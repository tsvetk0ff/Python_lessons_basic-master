# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3


# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"

# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"


# открытие и чтение файлов с исходными данными
with open('workers.txt', 'r', encoding='UTF-8') as f:
    workers = f.readlines()

with open('hours_of.txt', 'r', encoding='UTF-8') as g:
    hours_list = g.readlines()

# очистка исходных списков от символов переноса строки и лишних пробелов
db = []
for line in workers:
    db.append([word.replace('\n', '') for word in line.split(' ') if word != ''])

for line in hours_list:
    hours = [word.replace('\n', '') for word in line.split(' ') if word != '']
    for man in db:
        if man[0] == hours[0] and man[1] == hours[1]:
            man.append(hours[2])

# добавление столбца для добавления конечных результатов
db[0].append('Получено')

# цикл проверки условий выплат и вывод конечных результатов
for man in db[1:]:
    salary, required, done = int(man[2]), int(man[4]), int(man[5])
    if done < required:
        man.append(round(salary * done / required, 2))
    else:
        man.append(round(salary + 2 * salary * (done - required) / required, 2))
    print('{:<8}{:<9}{:<6}{:<13}{:<4}{:<4}{}'.format(*man))



# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))
